/*
 * Copyright (c) Rye Client 2025-2025.
 *
 * This file belongs to Rye Client,
 * an open-source Fabric injection client.
 * Rye GitHub: https://github.com/RyeClient/rye-v1.git
 *
 * This project (and subsequently, its files) are all licensed under the MIT License.
 * This project should have come with a copy of the MIT License.
 * If it did not, you may obtain a copy here:
 * MIT License: https://opensource.org/license/mit
 *
 */

package dev.thoq.module.impl.exploit;

import dev.thoq.config.setting.impl.BooleanSetting;
import dev.thoq.event.IEventListener;
import dev.thoq.event.impl.PacketReceiveEvent;
import dev.thoq.module.Module;
import dev.thoq.module.ModuleCategory;
import dev.thoq.utilities.player.TimerUtility;

@SuppressWarnings("FieldCanBeLocal")
public class CPUExploitModule extends Module {
    private final BooleanSetting cpuSpeedExploit = new BooleanSetting("CPU Speedup", "Exploits to gain speed", false);
    private final BooleanSetting clockSpeedExploit = new BooleanSetting("Clock Speedup", "Use cpu clock speed to gain speed in game", false);

    public CPUExploitModule() {
        super("CPUExploit", "Various methods to gain speed in game with CPU exploits", ModuleCategory.EXPLOIT);

        addSetting(cpuSpeedExploit);
        addSetting(clockSpeedExploit);
    }

    private final IEventListener<PacketReceiveEvent> packetReceiveEvent = event -> {
        boolean cpuSpeed = ((BooleanSetting) getSetting("CPU Speedup Exploit")).getValue();
        boolean clockSpeed = ((BooleanSetting) getSetting("Clock Speedup Exploit")).getValue();

        if(cpuSpeed) {
            TimerUtility.setTimerSpeed(1.005);
        }

        if(clockSpeed) {
            try {
                Thread currentThread = Thread.currentThread();
                currentThread.setPriority(Thread.MAX_PRIORITY);
            } catch (SecurityException ignored) {
            }
        }
    };

    @Override
    protected void onDisable() {
        TimerUtility.resetTimer();
        
        try {
            Thread.currentThread().setPriority(Thread.NORM_PRIORITY);
        } catch (SecurityException ignored) {
        }
    }

    @Override
    protected void onEnable() {
        TimerUtility.resetTimer();
    }
}
